{"version":3,"sources":["cli.js"],"names":["dns","require","log","packageJson","collect","val","memo","push","parseMaybeBoolString","parseJson","JSON","parse","getProcessEnvs","pEnv","processEnvs","checkInternet","lookup","err","code","warn","main","module","sanitizedArgs","process","argv","forEach","arg","length","previousArg","includes","program","version","arguments","action","targetUrl","appDir","out","option","parseInt","parseFloat","slice","help","error","appPath","info"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nimport 'source-map-support/register';\nimport program from 'commander';\nimport nativefier from './index';\n\nconst dns = require('dns');\nconst log = require('loglevel');\nconst packageJson = require('./../package');\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction parseMaybeBoolString(val) {\n  switch (val) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      return val;\n  }\n}\n\nfunction parseJson(val) {\n  if (!val) return {};\n  return JSON.parse(val);\n}\n\nfunction getProcessEnvs(val) {\n  if (!val) return {};\n  const pEnv = {};\n  pEnv.processEnvs = parseJson(val);\n  return pEnv;\n}\n\nfunction checkInternet() {\n  dns.lookup('npmjs.com', (err) => {\n    if (err && err.code === 'ENOTFOUND') {\n      log.warn(\n        '\\nNo Internet Connection\\nTo offline build, download electron from https://github.com/electron/electron/releases\\nand place in ~/AppData/Local/electron/Cache/ on Windows,\\n~/.cache/electron on Linux or ~/Library/Caches/electron/ on Mac\\nUse --electron-version to specify the version you downloaded.',\n      );\n    }\n  });\n}\n\nif (require.main === module) {\n  const sanitizedArgs = [];\n  process.argv.forEach((arg) => {\n    if (sanitizedArgs.length > 0) {\n      const previousArg = sanitizedArgs[sanitizedArgs.length - 1];\n\n      // Work around commander.js not supporting default argument for options\n      if (\n        previousArg === '--tray' &&\n        !['true', 'false', 'start-in-tray'].includes(arg)\n      ) {\n        sanitizedArgs.push('true');\n      }\n    }\n    sanitizedArgs.push(arg);\n  });\n\n  program\n    .version(packageJson.version, '-v, --version')\n    .arguments('<targetUrl> [dest]')\n    .action((targetUrl, appDir) => {\n      program.targetUrl = targetUrl;\n      program.out = appDir;\n    })\n    .option('-n, --name <value>', 'app name')\n    .option('-p, --platform <value>', \"'osx', 'mas', 'linux' or 'windows'\")\n    .option('-a, --arch <value>', \"'ia32' or 'x64' or 'armv7l'\")\n    .option(\n      '--app-version <value>',\n      'The release version of the application.  Maps to the `ProductVersion` metadata property on Windows, and `CFBundleShortVersionString` on OS X.',\n    )\n    .option(\n      '--build-version <value>',\n      'The build version of the application. Maps to the `FileVersion` metadata property on Windows, and `CFBundleVersion` on OS X.',\n    )\n    .option(\n      '--app-copyright <value>',\n      'The human-readable copyright line for the app. Maps to the `LegalCopyright` metadata property on Windows, and `NSHumanReadableCopyright` on OS X',\n    )\n    .option(\n      '--win32metadata <json-string>',\n      'a JSON string of key/value pairs of application metadata (ProductName, InternalName, FileDescription) to embed into the executable (Windows only).',\n      parseJson,\n    )\n    .option(\n      '-e, --electron-version <value>',\n      \"electron version to package, without the 'v', see https://github.com/electron/electron/releases\",\n    )\n    .option(\n      '--no-overwrite',\n      'do not override output directory if it already exists, defaults to false',\n    )\n    .option(\n      '-c, --conceal',\n      'packages the source code within your app into an archive, defaults to false, see https://electronjs.org/docs/tutorial/application-packaging',\n    )\n    .option(\n      '--counter',\n      'if the target app should use a persistent counter badge in the dock (macOS only), defaults to false',\n    )\n    .option(\n      '--bounce',\n      'if the the dock icon should bounce when counter increases (macOS only), defaults to false',\n    )\n    .option(\n      '-i, --icon <value>',\n      'the icon file to use as the icon for the app (should be a .png)',\n    )\n    .option(\n      '--width <value>',\n      'set window default width, defaults to 1280px',\n      parseInt,\n    )\n    .option(\n      '--height <value>',\n      'set window default height, defaults to 800px',\n      parseInt,\n    )\n    .option(\n      '--min-width <value>',\n      'set window minimum width, defaults to 0px',\n      parseInt,\n    )\n    .option(\n      '--min-height <value>',\n      'set window minimum height, defaults to 0px',\n      parseInt,\n    )\n    .option(\n      '--max-width <value>',\n      'set window maximum width, default is no limit',\n      parseInt,\n    )\n    .option(\n      '--max-height <value>',\n      'set window maximum height, default is no limit',\n      parseInt,\n    )\n    .option('--x <value>', 'set window x location', parseInt)\n    .option('--y <value>', 'set window y location', parseInt)\n    .option('-m, --show-menu-bar', 'set menu bar visible, defaults to false')\n    .option(\n      '-f, --fast-quit',\n      'quit app after window close (macOS only), defaults to false',\n    )\n    .option('-u, --user-agent <value>', 'set the user agent string for the app')\n    .option(\n      '--honest',\n      'prevent the nativefied app from changing the user agent string to masquerade as a regular chrome browser',\n    )\n    .option('--ignore-certificate', 'ignore certificate related errors')\n    .option('--disable-gpu', 'disable hardware acceleration')\n    .option(\n      '--ignore-gpu-blacklist',\n      'allow WebGl apps to work on non supported graphics cards',\n    )\n    .option('--enable-es3-apis', 'force activation of WebGl 2.0')\n    .option(\n      '--insecure',\n      'enable loading of insecure content, defaults to false',\n    )\n    .option('--flash', 'if flash should be enabled')\n    .option(\n      '--flash-path <value>',\n      'path to Chrome flash plugin, find it in `Chrome://plugins`',\n    )\n    .option(\n      '--disk-cache-size <value>',\n      'forces the maximum disk space (in bytes) to be used by the disk cache',\n    )\n    .option(\n      '--inject <value>',\n      'path to a CSS/JS file to be injected',\n      collect,\n      [],\n    )\n    .option(\n      '--full-screen',\n      'if the app should always be started in full screen',\n    )\n    .option('--maximize', 'if the app should always be started maximized')\n    .option('--hide-window-frame', 'disable window frame and controls')\n    .option('--verbose', 'if verbose logs should be displayed')\n    .option('--disable-context-menu', 'disable the context menu')\n    .option('--disable-dev-tools', 'disable developer tools')\n    .option(\n      '--zoom <value>',\n      'default zoom factor to use when the app is opened, defaults to 1.0',\n      parseFloat,\n    )\n    .option(\n      '--internal-urls <value>',\n      'regular expression of URLs to consider \"internal\"; all other URLs will be opened in an external browser.  (default: URLs on same second-level domain as app)',\n    )\n    .option(\n      '--crash-reporter <value>',\n      'remote server URL to send crash reports',\n    )\n    .option(\n      '--single-instance',\n      'allow only a single instance of the application',\n    )\n    .option(\n      '--clear-cache',\n      'prevent the application from preserving cache between launches',\n    )\n    .option(\n      '--processEnvs <json-string>',\n      'a JSON string of key/value pairs to be set as environment variables before any browser windows are opened.',\n      getProcessEnvs,\n    )\n    .option(\n      '--file-download-options <json-string>',\n      'a JSON string of key/value pairs to be set as file download options.  See https://github.com/sindresorhus/electron-dl for available options.',\n      parseJson,\n    )\n    .option(\n      '--tray [start-in-tray]',\n      \"Allow app to stay in system tray. If 'start-in-tray' is given as argument, don't show main window on first start\",\n      parseMaybeBoolString,\n    )\n    .option('--basic-auth-username <value>', 'basic http(s) auth username')\n    .option('--basic-auth-password <value>', 'basic http(s) auth password')\n    .option('--always-on-top', 'enable always on top window')\n    .option(\n      '--title-bar-style <value>',\n      \"(macOS only) set title bar style ('hidden', 'hiddenInset').  Consider injecting custom CSS (via --inject) for better integration.\",\n    )\n    .option(\n      '--global-shortcuts <value>',\n      'JSON file with global shortcut configuration. See https://github.com/jiahaog/nativefier/blob/master/docs/api.md#global-shortcuts',\n    )\n    .parse(sanitizedArgs);\n\n  if (!process.argv.slice(2).length) {\n    program.help();\n  }\n  checkInternet();\n  nativefier(program, (error, appPath) => {\n    if (error) {\n      log.error(error);\n      return;\n    }\n\n    if (!appPath) {\n      // app exists and --overwrite is not passed\n      return;\n    }\n    log.info(`App built to ${appPath}`);\n  });\n}\n"]}